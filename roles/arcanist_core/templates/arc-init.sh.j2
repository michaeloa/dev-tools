#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([action],[Valid actions are 'npm', 'gradle', 'maven' and 'npm'.],[])
# ARG_OPTIONAL_SINGLE([extras],[],[A coma-separated list of additional config files. Valid values are 'ansible' and 'teamcity'.],[])
# ARG_HELP([Utility script to initialize a code directory for arcanist.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_extras=


print_help()
{
  printf '%s\n' "Utility script to initialize a code directory for arcanist."
  printf 'Usage: %s [--extras <arg>] [-h|--help] <action>\n' "$0"
  printf '\t%s\n' "<action>: Valid actions are 'generic', 'gradle', 'maven' and 'npm'."
  printf '\t%s\n' "--extras: A coma-separated list of additional config files. Valid values are 'ansible' and 'teamcity'. (no default)"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --extras)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_extras="$2"
        shift
        ;;
      --extras=*)
        _arg_extras="${_key##--extras=}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'action'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_action "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -eE

TEMPLATE_PATH={{ devtools_path}}/templates/repo

if ! echo "$_arg_action" | egrep '(gradle|maven|none)' >/dev/null; then
    print_help
    exit 1;
fi

cp "${TEMPLATE_PATH}/arcconfig-${_arg_action}-template" ./.arcconfig
cp "${TEMPLATE_PATH}/arclint-template" ./.arclint
cp "${TEMPLATE_PATH}/CONTRIBUTING-template.md" ./CONTRIBUTING.md
cp "${TEMPLATE_PATH}/gitattributes-template" ./.gitattributes
cp "${TEMPLATE_PATH}/gitignore-template" ./.gitignore
cp -i "${TEMPLATE_PATH}/README-template.md" ./README.md

IFS=',' read -ra EXTRAS <<< "$_arg_extras"
unset IFS

if [[ "${EXTRAS[@]}" =~ "ansible" ]]; then
  cp ${TEMPLATE_PATH}/yamllint-template ./.yamllint
  cp ${TEMPLATE_PATH}/ansible-lint-template ./.ansible-lint
elif [[ "${EXTRAS[@]}" =~ "teamcity" ]]; then
  mkdir -p .teamcity/
  cp ${TEMPLATE_PATH}/teamcity/pom-template.xml .teamcity/pom.xml
  cp -i ${TEMPLATE_PATH}/teamcity/settings-${_arg_action}-template.kts .teamcity/settings.kts
fi

if [[ $(git rev-parse --is-inside-work-tree) == "true" ]]; then
    git init
fi

copy-git-hooks

# ] <-- needed because of Argbash
